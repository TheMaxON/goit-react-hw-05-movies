{"version":3,"file":"static/js/387.7706b993.chunk.js","mappings":"gMAEaA,E,QAAsBC,EAAAA,IAAH,6H,mBCmBhC,EAjBoB,WAClB,OACE,UAACD,EAAD,YACE,SAAC,KAAD,CACEE,OAAO,MACPC,MAAM,MACNC,MAAM,sBACNC,UAAU,eACVC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,KAEX,SAACC,EAAA,EAAD,CAAWC,MAAM,iBAGtB,C,iKCjBYC,E,QAASV,EAAAA,IAAH,mF,mBCiDnB,EA5CgB,WACd,IAAQW,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBJ,GAAa,GAFS,UAGHK,EAAAA,EAAAA,IAAgBX,GAHb,OAGhBY,EAHgB,OAItBR,EAAgBQ,GAJM,uDAMtBC,EAAAA,GAAAA,MAAY,sCAAZ,KAA0D,CACxDC,MAAO,SAETC,QAAQC,IAAR,MATsB,kBAUfR,EAAS,EAAD,KAVO,yBAYtBF,GAAa,GAZS,4EAAH,qDAgBvBI,GACD,GAAE,CAACV,KAGF,gCACGK,IAAa,SAACY,EAAA,EAAD,KACZZ,GAAqC,IAAxBF,EAAae,SAAgB,4CAC1Cb,IACCE,GACDJ,EAAae,OAAS,GACtBf,EAAagB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACf,UAACvB,EAAD,YACE,wBAAKsB,KACL,uBAAIC,MAFOF,EADE,MAQxB,C,kMC/CKG,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,6GAEND,EAAAA,EAAAA,IAAA,qCAAwCD,IAFlC,cAEvBG,EAFuB,yBAGtBA,EAASd,KAAKe,SAHQ,gCAK7BZ,QAAQC,IAAR,MAL6B,yDAAH,qDASjBY,EAAY,mCAAG,WAAM5B,GAAN,gGAEDwB,EAAAA,EAAAA,IAAA,gBAAmBxB,EAAnB,oBAAsCuB,IAFrC,cAElBG,EAFkB,yBAGjBA,EAASd,MAHQ,gCAKxBG,QAAQC,IAAR,MALwB,yDAAH,sDASZa,EAAY,mCAAG,WAAM7B,GAAN,gGAEDwB,EAAAA,EAAAA,IAAA,gBACZxB,EADY,4BACeuB,IAHd,cAElBG,EAFkB,yBAKjBA,EAASd,KAAKkB,MALG,gCAOxBf,QAAQC,IAAR,MAPwB,yDAAH,sDAWZL,EAAe,mCAAG,WAAMX,GAAN,gGAEJwB,EAAAA,EAAAA,IAAA,gBACZxB,EADY,4BACeuB,IAHX,cAErBG,EAFqB,yBAKpBA,EAASd,KAAKe,SALM,gCAO3BZ,QAAQC,IAAR,MAP2B,yDAAH,sDAWfe,EAAiB,mCAAG,WAAMC,GAAN,gGAENR,EAAAA,EAAAA,IAAA,+BACGD,EADH,iCACmCS,EADnC,yBAFM,cAEvBN,EAFuB,yBAKtBA,EAASd,KAAKe,SALQ,gCAO7BZ,QAAQC,IAAR,MAP6B,yDAAH,qD","sources":["components/Loader/SmallLoader.styled.jsx","components/Loader/SmallLoader.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledLoaderWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  z-index: 20;\n`;\n","import { Bars } from 'react-loader-spinner';\nimport { StyledLoaderWrapper } from './SmallLoader.styled';\nimport PageTitle from '../PageTitle/PageTitle';\n\nconst SmallLoader = () => {\n  return (\n    <StyledLoaderWrapper>\n      <Bars\n        height=\"200\"\n        width=\"200\"\n        color=\"var(--color-accent)\"\n        ariaLabel=\"bars-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"\"\n        visible={true}\n      />\n      <PageTitle title=\"Loading...\" />\n    </StyledLoaderWrapper>\n  );\n};\n\nexport default SmallLoader;\n","import styled from '@emotion/styled';\n\nexport const Review = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { getMovieReviews } from '../../services/api';\nimport { Review } from './Reviews.styled';\nimport SmallLoader from '../Loader/SmallLoader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        setIsLoading(true);\n        const data = await getMovieReviews(movieId);\n        setMovieReviews(data);\n      } catch (error) {\n        toast.error('The error has occured. Error info: ', error, {\n          theme: 'dark',\n        });\n        console.log(error);\n        return setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <SmallLoader />}\n      {!isLoading && movieReviews.length === 0 && <p>No reviews yet.</p>}\n      {!isLoading &&\n        !error &&\n        movieReviews.length > 0 &&\n        movieReviews.map(({ id, author, content }) => (\n          <Review key={id}>\n            <h2>{author}</h2>\n            <p>{content}</p>\n          </Review>\n        ))}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'a686af912263638c370a0fbfc3731476';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieInfo = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    return response.data.cast;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getSearchedMovies = async query => {\n  try {\n    const response = await axios.get(\n      `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["StyledLoaderWrapper","styled","height","width","color","ariaLabel","wrapperStyle","wrapperClass","visible","PageTitle","title","Review","movieId","useParams","useState","movieReviews","setMovieReviews","isLoading","setIsLoading","error","setError","useEffect","fetchMovieReviews","getMovieReviews","data","toast","theme","console","log","SmallLoader","length","map","id","author","content","API_KEY","axios","getTrendingMovies","response","results","getMovieInfo","getMovieCast","cast","getSearchedMovies","query"],"sourceRoot":""}